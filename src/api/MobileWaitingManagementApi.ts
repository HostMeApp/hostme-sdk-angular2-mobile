/**
 * Qa mobile api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: mb
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering max-line-length */


@Injectable()
export class MobileWaitingManagementApi {
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, protected configuration: Configuration) {
    }

    /**
     * 
     * 
     * @param waitingItemId 
     */
    public checkInWithWaiting(waitingItemId: number, extraHttpRequestParams?: any): Observable<models.Transaction> {
        return this.checkInWithWaitingWithHttpInfo(waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Closes waiting position.
     * Closes current waiting position. When person gets a table, hostess should close current position.
     * @param waitingItemId Identifier of the waiting item
     */
    public close(waitingItemId: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.closeWithHttpInfo(waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Confirm waiting record from HostMe mobile application
     * 
     * @param confirmationCode Confirmation code that has been generated during initial registration by hostess
     * @param conf Conformation model
     */
    public confirmWithApp(confirmationCode: number, conf: models.PhoneConfirmation, extraHttpRequestParams?: any): Observable<{}> {
        return this.confirmWithAppWithHttpInfo(confirmationCode, conf, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Put customer in line.
     * This method puts customer in a line on a fly. This is remote registration in a line. Waiting item will be automatically put on hold.
     * @param value 
     */
    public getInLine(value: models.PutInLine, extraHttpRequestParams?: any): Observable<models.WaitingItem> {
        return this.getInLineWithHttpInfo(value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns current user waiting item
     * 
     */
    public getUserCurrentWaiting(extraHttpRequestParams?: any): Observable<models.WaitingItem> {
        return this.getUserCurrentWaitingWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Cancels waiting position.
     * Cancels specified waiting position. Client may decide to go to another restaurant and cancel current waiting item.
     * @param waitingItemId Waiting item identifier
     */
    public leaveTheLine(waitingItemId: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.leaveTheLineWithHttpInfo(waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Mark all message as read.
     * 
     * @param waitingItemId Waiting item identifier
     */
    public markAllMessagesAsRead(waitingItemId: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.markAllMessagesAsReadWithHttpInfo(waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Put waiting item on hold manually
     * 
     * @param restaurantId Restaurant identifier
     * @param waitingItemId Waiting item identifier
     */
    public putOnHold(restaurantId: number, waitingItemId: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.putOnHoldWithHttpInfo(restaurantId, waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sends a message related to specified waiting item.
     * 
     * @param waitingItemId Waiting item identifier
     * @param createMessage The body of the message
     */
    public sendMessageToWaiting(waitingItemId: number, createMessage: models.CreateMessage, extraHttpRequestParams?: any): Observable<{}> {
        return this.sendMessageToWaitingWithHttpInfo(waitingItemId, createMessage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Set waiting item off hold
     * 
     * @param restaurantId Restaurant identifier
     * @param waitingItemId Waiting item identifier
     */
    public takeOffHold(restaurantId: number, waitingItemId: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.takeOffHoldWithHttpInfo(restaurantId, waitingItemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param waitingItemId 
     */
    public checkInWithWaitingWithHttpInfo(waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/checkin`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling checkInWithWaiting.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Closes waiting position.
     * Closes current waiting position. When person gets a table, hostess should close current position.
     * @param waitingItemId Identifier of the waiting item
     */
    public closeWithHttpInfo(waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/close`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling close.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Confirm waiting record from HostMe mobile application
     * 
     * @param confirmationCode Confirmation code that has been generated during initial registration by hostess
     * @param conf Conformation model
     */
    public confirmWithAppWithHttpInfo(confirmationCode: number, conf: models.PhoneConfirmation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/confirm/${confirmationCode}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'confirmationCode' is undefined
        if (confirmationCode === undefined) {
            throw new Error('Required parameter confirmationCode was null or undefined when calling confirmWithApp.');
        }
        // verify required parameter 'conf' is undefined
        if (conf === undefined) {
            throw new Error('Required parameter conf was null or undefined when calling confirmWithApp.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: conf == undefined ? '' : JSON.stringify(conf), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Put customer in line.
     * This method puts customer in a line on a fly. This is remote registration in a line. Waiting item will be automatically put on hold.
     * @param value 
     */
    public getInLineWithHttpInfo(value: models.PutInLine, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'value' is undefined
        if (value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling getInLine.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: value == undefined ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns current user waiting item
     * 
     */
    public getUserCurrentWaitingWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Cancels waiting position.
     * Cancels specified waiting position. Client may decide to go to another restaurant and cancel current waiting item.
     * @param waitingItemId Waiting item identifier
     */
    public leaveTheLineWithHttpInfo(waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/cancel`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling leaveTheLine.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Mark all message as read.
     * 
     * @param waitingItemId Waiting item identifier
     */
    public markAllMessagesAsReadWithHttpInfo(waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/messages/readall`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling markAllMessagesAsRead.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Put waiting item on hold manually
     * 
     * @param restaurantId Restaurant identifier
     * @param waitingItemId Waiting item identifier
     */
    public putOnHoldWithHttpInfo(restaurantId: number, waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/putonhold`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling putOnHold.');
        }
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling putOnHold.');
        }
        if (restaurantId !== undefined) {
            queryParameters.set('restaurantId', restaurantId as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Sends a message related to specified waiting item.
     * 
     * @param waitingItemId Waiting item identifier
     * @param createMessage The body of the message
     */
    public sendMessageToWaitingWithHttpInfo(waitingItemId: number, createMessage: models.CreateMessage, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/sendmessage`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling sendMessageToWaiting.');
        }
        // verify required parameter 'createMessage' is undefined
        if (createMessage === undefined) {
            throw new Error('Required parameter createMessage was null or undefined when calling sendMessageToWaiting.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: createMessage == undefined ? '' : JSON.stringify(createMessage), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Set waiting item off hold
     * 
     * @param restaurantId Restaurant identifier
     * @param waitingItemId Waiting item identifier
     */
    public takeOffHoldWithHttpInfo(restaurantId: number, waitingItemId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/wm/mb/waitings/${waitingItemId}/takeoffhold`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling takeOffHold.');
        }
        // verify required parameter 'waitingItemId' is undefined
        if (waitingItemId === undefined) {
            throw new Error('Required parameter waitingItemId was null or undefined when calling takeOffHold.');
        }
        if (restaurantId !== undefined) {
            queryParameters.set('restaurantId', restaurantId as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

}
