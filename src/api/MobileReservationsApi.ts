/**
 * Qa mobile api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: mb
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable }                      					 from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering max-line-length */


@Injectable()
export class MobileReservationsApi {
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, protected configuration: Configuration) {
    }

    /**
     * 
     * 
     * @param value 
     */
    public addNewReservation(value: models.CreateCustomerReservation, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.addNewReservationWithHttpInfo(value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param reservationId 
     * @param cancelReservationContract 
     */
    public closeAsCanceled(reservationId: string, cancelReservationContract: models.CancelReservation, extraHttpRequestParams?: any): Observable<{}> {
        return this.closeAsCanceledWithHttpInfo(reservationId, cancelReservationContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param reservationId 
     */
    public getReservationById(reservationId: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.getReservationByIdWithHttpInfo(reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param queryOptions 
     */
    public getUserReservations(queryOptions?: string, extraHttpRequestParams?: any): Observable<Array<models.Reservation>> {
        return this.getUserReservationsWithHttpInfo(queryOptions, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Mark all messages as read.
     * Mark all reservation messages as read.
     * @param reservationId Reservation identifier
     */
    public readAllMessage(reservationId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.readAllMessageWithHttpInfo(reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sends a message related to specified reservation
     * 
     * @param reservationId Reservation identifier
     * @param createMessageContract The message with body
     */
    public sendMessageToReservation(reservationId: string, createMessageContract: models.CreateMessage, extraHttpRequestParams?: any): Observable<{}> {
        return this.sendMessageToReservationWithHttpInfo(reservationId, createMessageContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param reservationId 
     * @param value 
     */
    public updateReservation(reservationId: string, value: models.UpdateReservation, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateReservationWithHttpInfo(reservationId, value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param value 
     */
    public addNewReservationWithHttpInfo(value: models.CreateCustomerReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'value' is undefined
        if (value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling addNewReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: value == undefined ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param reservationId 
     * @param cancelReservationContract 
     */
    public closeAsCanceledWithHttpInfo(reservationId: string, cancelReservationContract: models.CancelReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations/${reservationId}/cancel';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reservationId' is undefined
        if (reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling closeAsCanceled.');
        }
        // verify required parameter 'cancelReservationContract' is undefined
        if (cancelReservationContract === undefined) {
            throw new Error('Required parameter cancelReservationContract was null or undefined when calling closeAsCanceled.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: cancelReservationContract == undefined ? '' : JSON.stringify(cancelReservationContract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param reservationId 
     */
    public getReservationByIdWithHttpInfo(reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations/${reservationId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reservationId' is undefined
        if (reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling getReservationById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param queryOptions 
     */
    public getUserReservationsWithHttpInfo(queryOptions?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (queryOptions !== undefined) {
            queryParameters.set('queryOptions', queryOptions as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Mark all messages as read.
     * Mark all reservation messages as read.
     * @param reservationId Reservation identifier
     */
    public readAllMessageWithHttpInfo(reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations/${reservationId}/messages/readall';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reservationId' is undefined
        if (reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling readAllMessage.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Sends a message related to specified reservation
     * 
     * @param reservationId Reservation identifier
     * @param createMessageContract The message with body
     */
    public sendMessageToReservationWithHttpInfo(reservationId: string, createMessageContract: models.CreateMessage, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations/${reservationId}/messages';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reservationId' is undefined
        if (reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling sendMessageToReservation.');
        }
        // verify required parameter 'createMessageContract' is undefined
        if (createMessageContract === undefined) {
            throw new Error('Required parameter createMessageContract was null or undefined when calling sendMessageToReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: createMessageContract == undefined ? '' : JSON.stringify(createMessageContract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param reservationId 
     * @param value 
     */
    public updateReservationWithHttpInfo(reservationId: string, value: models.UpdateReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/rsv/mb/reservations/${reservationId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reservationId' is undefined
        if (reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling updateReservation.');
        }
        // verify required parameter 'value' is undefined
        if (value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling updateReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: value == undefined ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

}
