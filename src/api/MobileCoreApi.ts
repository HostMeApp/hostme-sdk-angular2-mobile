/**
 * Qa mobile api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: mb
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable }                      					 from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering max-line-length */


@Injectable()
export class MobileCoreApi {
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, protected configuration: Configuration) {
    }

    /**
     * 
     * 
     * @param model 
     */
    public addExternalLogin(model: models.AddExternalLogin, extraHttpRequestParams?: any): Observable<{}> {
        return this.addExternalLoginWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public changePassword(model: models.ChangePassword, extraHttpRequestParams?: any): Observable<{}> {
        return this.changePasswordWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param checkinContract 
     */
    public checkIn(checkinContract: models.TransactionCheckin, extraHttpRequestParams?: any): Observable<models.Transaction> {
        return this.checkInWithHttpInfo(checkinContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param lat 
     * @param lon 
     * @param name 
     * @param city 
     */
    public findRestaurants(lat?: number, lon?: number, name?: string, city?: string, extraHttpRequestParams?: any): Observable<Array<models.RestaurantInfo>> {
        return this.findRestaurantsWithHttpInfo(lat, lon, name, city, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public getAllRestaurants(extraHttpRequestParams?: any): Observable<Array<models.RestaurantInfo>> {
        return this.getAllRestaurantsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public getListOfLocations(extraHttpRequestParams?: any): Observable<Array<models.Location>> {
        return this.getListOfLocationsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param returnUrl 
     * @param generateState 
     */
    public getManageInfo(returnUrl: string, generateState?: boolean, extraHttpRequestParams?: any): Observable<models.ManageInfo> {
        return this.getManageInfoWithHttpInfo(returnUrl, generateState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param token 
     */
    public getRegistrationToken(token: string, extraHttpRequestParams?: any): Observable<models.CampaignInfo> {
        return this.getRegistrationTokenWithHttpInfo(token, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param areas 
     */
    public getReservationAvailability(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Array<models.OnlineAvailability>> {
        return this.getReservationAvailabilityWithHttpInfo(restaurantId, date, partySize, rangeInMinutes, areas, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public getRestaurantById(id: number, extraHttpRequestParams?: any): Observable<models.RestaurantInfo> {
        return this.getRestaurantByIdWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public getUserInfo(extraHttpRequestParams?: any): Observable<models.UserExternal> {
        return this.getUserInfoWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public getUserProfile(extraHttpRequestParams?: any): Observable<models.UserProfile> {
        return this.getUserProfileWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param image 
     */
    public postProfileImage(image: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.postProfileImageWithHttpInfo(image, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public profileImage(extraHttpRequestParams?: any): Observable<string> {
        return this.profileImageWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public register(model: models.RegisterUser, extraHttpRequestParams?: any): Observable<{}> {
        return this.registerWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public registerExternal(model: models.RegisterExternalUser, extraHttpRequestParams?: any): Observable<{}> {
        return this.registerExternalWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public removeLogin(model: models.RemoveLogin, extraHttpRequestParams?: any): Observable<{}> {
        return this.removeLoginWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public resetPassword(model: models.ResetPassword, extraHttpRequestParams?: any): Observable<{}> {
        return this.resetPasswordWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param model 
     */
    public setPassword(model: models.SetPassword, extraHttpRequestParams?: any): Observable<{}> {
        return this.setPasswordWithHttpInfo(model, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param channel 
     */
    public setPushChannelAsync(channel: models.SetPushChannel, extraHttpRequestParams?: any): Observable<{}> {
        return this.setPushChannelAsyncWithHttpInfo(channel, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param profile 
     */
    public updateUserProfile(profile: models.UserProfile, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateUserProfileWithHttpInfo(profile, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param model 
     */
    public addExternalLoginWithHttpInfo(model: models.AddExternalLogin, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/addExternalLogin`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling addExternalLogin.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public changePasswordWithHttpInfo(model: models.ChangePassword, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/changePassword`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling changePassword.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param checkinContract 
     */
    public checkInWithHttpInfo(checkinContract: models.TransactionCheckin, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/restaurant/checkin`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'checkinContract' is undefined
        if (checkinContract === undefined) {
            throw new Error('Required parameter checkinContract was null or undefined when calling checkIn.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: checkinContract == undefined ? '' : JSON.stringify(checkinContract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param lat 
     * @param lon 
     * @param name 
     * @param city 
     */
    public findRestaurantsWithHttpInfo(lat?: number, lon?: number, name?: string, city?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/restaurants/find`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (lat !== undefined) {
            queryParameters.set('lat', lat as any);
        }
        if (lon !== undefined) {
            queryParameters.set('lon', lon as any);
        }
        if (name !== undefined) {
            queryParameters.set('name', name as any);
        }
        if (city !== undefined) {
            queryParameters.set('city', city as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public getAllRestaurantsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/restaurants`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public getListOfLocationsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/locations`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param returnUrl 
     * @param generateState 
     */
    public getManageInfoWithHttpInfo(returnUrl: string, generateState?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/manageInfo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'returnUrl' is undefined
        if (returnUrl === undefined) {
            throw new Error('Required parameter returnUrl was null or undefined when calling getManageInfo.');
        }
        if (returnUrl !== undefined) {
            queryParameters.set('returnUrl', returnUrl as any);
        }
        if (generateState !== undefined) {
            queryParameters.set('generateState', generateState as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param token 
     */
    public getRegistrationTokenWithHttpInfo(token: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/campaign/${token}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'token' is undefined
        if (token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getRegistrationToken.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param areas 
     */
    public getReservationAvailabilityWithHttpInfo(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/restaurants/${restaurantId}/availability`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'date' is undefined
        if (date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'partySize' is undefined
        if (partySize === undefined) {
            throw new Error('Required parameter partySize was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'rangeInMinutes' is undefined
        if (rangeInMinutes === undefined) {
            throw new Error('Required parameter rangeInMinutes was null or undefined when calling getReservationAvailability.');
        }
        if (date !== undefined) {
            queryParameters.set('date', date as any);
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', partySize as any);
        }
        if (rangeInMinutes !== undefined) {
            queryParameters.set('rangeInMinutes', rangeInMinutes as any);
        }
        if (areas !== undefined) {
            queryParameters.set('areas', areas as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public getRestaurantByIdWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/restaurants/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is undefined
        if (id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRestaurantById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public getUserInfoWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/userInfo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public getUserProfileWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/profile`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param image 
     */
    public postProfileImageWithHttpInfo(image: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/profile/image`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'image' is undefined
        if (image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling postProfileImage.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: image == undefined ? '' : JSON.stringify(image), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public profileImageWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/profile/image`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/octet-stream'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public registerWithHttpInfo(model: models.RegisterUser, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/register`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling register.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public registerExternalWithHttpInfo(model: models.RegisterExternalUser, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/registerExternal`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling registerExternal.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public removeLoginWithHttpInfo(model: models.RemoveLogin, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/removeLogin`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling removeLogin.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public resetPasswordWithHttpInfo(model: models.ResetPassword, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/resetPassword`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling resetPassword.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param model 
     */
    public setPasswordWithHttpInfo(model: models.SetPassword, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/setPassword`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is undefined
        if (model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling setPassword.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: model == undefined ? '' : JSON.stringify(model), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param channel 
     */
    public setPushChannelAsyncWithHttpInfo(channel: models.SetPushChannel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/setPushChannel`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'channel' is undefined
        if (channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling setPushChannelAsync.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: channel == undefined ? '' : JSON.stringify(channel), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param profile 
     */
    public updateUserProfileWithHttpInfo(profile: models.UserProfile, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + `/api/core/mb/account/profile`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'profile' is undefined
        if (profile === undefined) {
            throw new Error('Required parameter profile was null or undefined when calling updateUserProfile.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: profile == undefined ? '' : JSON.stringify(profile), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

}
