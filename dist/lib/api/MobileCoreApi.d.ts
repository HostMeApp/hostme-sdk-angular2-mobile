import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export declare class MobileCoreApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    addExternalLogin(model: models.AddExternalLogin, extraHttpRequestParams?: any): Observable<{}>;
    changePassword(model: models.ChangePassword, extraHttpRequestParams?: any): Observable<{}>;
    checkIn(checkinContract: models.TransactionCheckin, extraHttpRequestParams?: any): Observable<models.Transaction>;
    findRestaurants(lat?: number, lon?: number, name?: string, city?: string, extraHttpRequestParams?: any): Observable<Array<models.RestaurantInfo>>;
    getAllRestaurants(extraHttpRequestParams?: any): Observable<Array<models.RestaurantInfo>>;
    getListOfLocations(extraHttpRequestParams?: any): Observable<Array<models.Location>>;
    getManageInfo(returnUrl: string, generateState?: boolean, extraHttpRequestParams?: any): Observable<models.ManageInfo>;
    getRegistrationToken(token: string, extraHttpRequestParams?: any): Observable<models.CampaignInfo>;
    getReservationAvailability(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Array<models.OnlineAvailability>>;
    getRestaurantById(id: number, extraHttpRequestParams?: any): Observable<models.RestaurantInfo>;
    getUserInfo(extraHttpRequestParams?: any): Observable<models.UserExternal>;
    getUserProfile(extraHttpRequestParams?: any): Observable<models.UserProfile>;
    postProfileImage(image: string, extraHttpRequestParams?: any): Observable<{}>;
    profileImage(extraHttpRequestParams?: any): Observable<string>;
    register(model: models.RegisterUser, extraHttpRequestParams?: any): Observable<{}>;
    registerExternal(model: models.RegisterExternalUser, extraHttpRequestParams?: any): Observable<{}>;
    removeLogin(model: models.RemoveLogin, extraHttpRequestParams?: any): Observable<{}>;
    resetPassword(model: models.ResetPassword, extraHttpRequestParams?: any): Observable<{}>;
    setPassword(model: models.SetPassword, extraHttpRequestParams?: any): Observable<{}>;
    setPushChannelAsync(channel: models.SetPushChannel, extraHttpRequestParams?: any): Observable<{}>;
    updateUserProfile(profile: models.UserProfile, extraHttpRequestParams?: any): Observable<{}>;
    addExternalLoginWithHttpInfo(model: models.AddExternalLogin, extraHttpRequestParams?: any): Observable<Response>;
    changePasswordWithHttpInfo(model: models.ChangePassword, extraHttpRequestParams?: any): Observable<Response>;
    checkInWithHttpInfo(checkinContract: models.TransactionCheckin, extraHttpRequestParams?: any): Observable<Response>;
    findRestaurantsWithHttpInfo(lat?: number, lon?: number, name?: string, city?: string, extraHttpRequestParams?: any): Observable<Response>;
    getAllRestaurantsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    getListOfLocationsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    getManageInfoWithHttpInfo(returnUrl: string, generateState?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    getRegistrationTokenWithHttpInfo(token: string, extraHttpRequestParams?: any): Observable<Response>;
    getReservationAvailabilityWithHttpInfo(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Response>;
    getRestaurantByIdWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response>;
    getUserInfoWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    getUserProfileWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    postProfileImageWithHttpInfo(image: string, extraHttpRequestParams?: any): Observable<Response>;
    profileImageWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    registerWithHttpInfo(model: models.RegisterUser, extraHttpRequestParams?: any): Observable<Response>;
    registerExternalWithHttpInfo(model: models.RegisterExternalUser, extraHttpRequestParams?: any): Observable<Response>;
    removeLoginWithHttpInfo(model: models.RemoveLogin, extraHttpRequestParams?: any): Observable<Response>;
    resetPasswordWithHttpInfo(model: models.ResetPassword, extraHttpRequestParams?: any): Observable<Response>;
    setPasswordWithHttpInfo(model: models.SetPassword, extraHttpRequestParams?: any): Observable<Response>;
    setPushChannelAsyncWithHttpInfo(channel: models.SetPushChannel, extraHttpRequestParams?: any): Observable<Response>;
    updateUserProfileWithHttpInfo(profile: models.UserProfile, extraHttpRequestParams?: any): Observable<Response>;
}
